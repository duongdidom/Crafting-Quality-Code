palindrome = a string that is read the same front-to-back and back-to-front.

algorithm = a sequence of steps that accomplish a task.

use import doctest
    doctest.testmod()
... to test if the output of the function meets the intended output

when running a module, its variable __name__ refers to the string '__main__' ==> if we have code that should only be executed when a module is run and not when that module is imported, 
we should make sure to put that code inside "if __name__ equals __main__" statement. 

self in class refers to the object that the method is being called on.

unittest =  1. import unittest 
            2. define a new class in the module
            3. define each test case in the module as separated function
            4. in each test case, call the module that we want to test --> assign the actual result in a variable (e.g. actual)
            5. assigne the expected result in another variable (e.g. expected)
            6. check if the actual and expected variables are the same
unittest.main looks through all the test case sub classes, in the correct module for methods that begin with "test", it calls each of them and reports any unexpected result.
Each dot in the displayed result indicates a test. Each other error code indicates a failed test (e.g. F = failed, E = error)

choosing test cases:
    1. size: For collections, such as strings, lists, tuples, and dictionaries. Test with the empty collection. A collection with 1 item. The smallest interesting case. And a  collection with several items. 
    2. dichotomies: For example. Vowels and non-vowels. Even and odd. Positive and negative. Empty and full.
    3. boundaries: If the function behaves differently for values near a particular threshold, test at that threshold.
    4. order: if the function behaves differently when the values are in different orders, identify and test each of those orders. 

analysing algorithm = look at number of steps they take for a particular input. Rather than timing how long it takes the code to run. 

steps = how many times a function is executed. Including inside the loop. e.g.:
    for i in range (1, n+1):        --> looped n times
        for j in range (1, n+1):    --> looped n times
            print(i, j)             --> shall be executed n*n = n**2 times

number of steps can be linear (increasing same as n as n grows), quadratic (increasing more than n as n grows), or logarithmic (reducing as n grows)

if 2 solutions solve the same problem, should use the solution that have linear runtime

in python, object is the most base class, meaning that every other class is derived from the object class. See help(object).

dir(object) = list all methods in a class

methods that begin and end in 2 underscores are called special methods. E.g. __main__, __format__, __init__...

str.format uses placeholders (0,1,2,...) to replace with actual values in the string. The placeholders act as the index